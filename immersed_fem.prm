# Listing of Parameters
# ---------------------
set All Dirichlet BC                        = true
set Delta t                                 = .1
set Density                                 = 1
set Dirichlet BC indicator                  = 1
set Elastic modulus                         = 1
set Final t                                 = 1
# Select between FE_Q (Lagrange finite element space of continuous, piecewise
# polynomials) or FE_DGP(Discontinuous finite elements based on Legendre
# polynomials) to approximate the pressure field
set Finite element for pressure             = FE_DGP
set Fix one dof of p                        = false
set Fluid mesh                              = mesh/fluid_square.inp
set Fluid refinement                        = 4
set Force J update at step beginning        = false
set Interval (of time-steps) between output = 1
set Output base name                        = out/square
set Phi_B                                   = 1
set Semi-implicit scheme                    = true

# Constitutive models available are: INH_0: incompressible Neo-Hookean with
# P^{e} = mu F; INH_1: incompressible neo-Hookean with P^{e} = mu (F -
# F^{-T}); CircumferentialFiberModel: incompressible with P^{e} = mu F
# (e_{\theta} \otimes e_{\theta}) F^{-T}; this is suitable for annular solid
# comprising inextensible circumferential fibers
set Solid constitutive model                = INH_0
set Solid mesh                              = mesh/solid_square.inp
set Solid refinement                        = 1
set Update J cont                           = false
set Use spread operator                     = true
set Velocity finite element degree          = 2
set Viscosity                               = 1


subsection Equilibrium Solution of Ring with Circumferential Fibers
  set Any edge length of the (square) control volume = 1.
  set Inner radius of the ring                       = 0.25
  set Width of the ring                              = 0.0625
  set x-coordinate of the center of the ring         = 0.5
  set y-coordinate of the center of the ring         = 0.5
end


subsection W0
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  # 
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  = 

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the fparser library.
  # 
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection force
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  # 
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  = 

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the fparser library.
  # 
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection u0
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  # 
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  = 

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the fparser library.
  # 
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


subsection ug
  # Sometimes it is convenient to use symbolic constants in the expression
  # that describes the function, rather than having to use its numeric value
  # everywhere the constant appears. These values can be defined using this
  # parameter, in the form `var1=value1, var2=value2, ...'.
  # 
  # A typical example would be to set this runtime parameter to
  # `pi=3.1415926536' and then use `pi' in the expression of the actual
  # formula. (That said, for convenience this class actually defines both `pi'
  # and `Pi' by default, but you get the idea.)
  set Function constants  = 

  # The formula that denotes the function you want to evaluate for particular
  # values of the independent variables. This expression may contain any of
  # the usual operations such as addition or multiplication, as well as all of
  # the common functions such as `sin' or `cos'. In addition, it may contain
  # expressions like `if(x>0, 1, -1)' where the expression evaluates to the
  # second argument if the first argument is true, and to the third argument
  # otherwise. For a full overview of possible expressions accepted see the
  # documentation of the fparser library.
  # 
  # If the function you are describing represents a vector-valued function
  # with multiple components, then separate the expressions for individual
  # components by a semicolon.
  set Function expression = 0; 0; 0

  # The name of the variables as they will be used in the function, separated
  # by commas. By default, the names of variables at which the function will
  # be evaluated is `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in 3d) for spatial
  # coordinates and `t' for time. You can then use these variable names in
  # your function expression and they will be replaced by the values of these
  # variables at which the function is currently evaluated. However, you can
  # also choose a different set of names for the independent variables at
  # which to evaluate your function expression. For example, if you work in
  # spherical coordinates, you may wish to set this input parameter to
  # `r,phi,theta,t' and then use these variable names in your function
  # expression.
  set Variable names      = x,y,t
end


