<br>

<a name="Intro"></a>
<h1> Introduction </h1>

<p>
We present the implementation of a solution scheme for fluid-structure interaction problems via the finite element software library <tt>deal.II</tt>.  The solution scheme is an immersed finite element method in which two independent discretizations are used for the fluid and immersed deformable body.  In this type of formulation the support of the equations of motion of the fluid is extended to cover the union of the solid and fluid domains.  The equations of motion over the extended solution domain govern the flow of a fluid under the action of a body force field.  This body force field informs the fluid of the presence of the immersed solid.  The velocity field of the immersed solid is the restriction over the immersed domain of the velocity field in the extended equations of motion.  The focus of this paper is to show how the determination of the motion of the immersed domain is carried out in practice.  We show that our implementation is automatically obtained from the choice of finite element spaces over the immerse solid and the extended fluid domains.  We present some preliminary results concerning the accuracy of the proposed method.

</p>

<p>
The general theory underlying the current development has been presented in Heltai, L. and F. Costanzo (2012), "Variational implementation of immersed finite element methods," <i>Computer Methods in Applied Mechanics and Engineering</i>, 229&ndash;232, p. 110&ndash;127.
</p>



<a name="Governing Equations"></a>
<h3> Governing Equations </h3>
@f B_{t}@f in the Fig. below

represents the configuration of a regular body at time $t$.   $B_{t}$ is a (possibly multiply connected) proper subset of a fixed control volume $\Omega$:  $\Omega\setminus B_{t}$ is filled by a fluid and $B_{t}$ is an <i>immersed body</i>.  $B$ is the reference configuration of the immersed body.  We denote the position of points in $B$ by $\boldsymbol{s}$, whereas we denote the position at time $t$ of a point in $\Omega$ by $\bolsymbol{x}(t)$.


<a name ="fullydiscrete"></a>
<h3> The Fully Discrete Setting </h3>
To obtain a fully discrete setting of the method we, as always, need a variational formulation. There is one
subtle issue here given the nature of the boundary conditions. When we multiply the equation by a suitable test
function one of the term that arises is
@f[
  -\nu \int_\Omega \Delta u \cdot v.
@f]
If we, say, had Dirichlet boundary conditions on the whole boundary then after integration by parts we would
obtain
@f[
  -\nu \int_\Omega \Delta u \cdot v = \nu \int_\Omega \nabla u : \nabla v
                                    - \int_{\partial\Omega} \partial_n u \cdot v
                                    = \nu \int_\Omega \nabla u : \nabla v.
@f]
One of the advantages of this formulation is that it fully decouples the components of the velocity. Moreover,
they all share the same system matrix. This can be exploited in the program.

However, given the nonstandard boundary conditions, to be able to take them into account we need to use
the following %identity
@f[
  \Delta u = \nabla\nabla\cdot u - \nabla\times\nabla\times u,
@f]
so that when we integrate by parts and take into account the boundary conditions we obtain
@f[
  -\nu \int_\Omega \Delta u \cdot v = \nu \int_\Omega \left[ \nabla \cdot u \nabla \cdot v
                                    + \nabla \times u \nabla \times v \right],
@f]
which is the form that we would have to use. Notice that this couples the components of the velocity.
Moreover, to enforce the boundary condition on the pressure, we need to rewrite
@f[
  \int_\Omega \nabla p \cdot v = -\int_\Omega p \nabla \cdot v + \int_{\Gamma_1} p v\cdot n
                                + \int_{\Gamma_2} p v\cdot n
                               = -\int_\Omega p \nabla \cdot v,
@f]
where the boundary integral in $\Gamma_1$ equals zero given the boundary conditions for the velocity,
and the one in $\Gamma_2$ given the boundary conditions for the pressure.

In the simplified case where the boundary $\Gamma_2$ is %parallel to a coordinate axis, which holds for
the testcase that we carry out below, it can actually be shown that
@f[
  \nu \int_\Omega \nabla u : \nabla v = \nu \int_\Omega \left[ \nabla \cdot u \nabla \cdot v
                                    + \nabla \times u \nabla \times v \right].
@f]
This issue is not very often addressed in the literature. For more information the reader can consult, for
instance,
<ul>
  <li> J.-L. GUERMOND, L. QUARTAPELLE, On the approximation of the unsteady Navier-Stokes equations by
  finite element projection methods, Numer. Math., 80  (1998) 207-238
  <li> J.-L. GUERMOND, P. MINEV, J. SHEN, Error analysis of pressure-correction schemes for the
  Navier-Stokes equations with open boundary conditions, SIAM J. Numer. Anal., 43  1 (2005) 239--258.
</ul>



<a name = "implementation"></a>
<h3> Implementation </h3>

Our implementation of the projection methods follows <i>verbatim</i> the description given above. We must note,
however, that as opposed to most other problems that have several solution components, we do not use
vector-valued finite elements. Instead, we use separate finite elements the components of the velocity
and the pressure, respectively, and use different <code>DoFHandler</code>'s for those as well. The main
reason for doing this is that, as we see from the description of the scheme, the <code>dim</code> components
of the velocity and the pressure are decoupled. As a consequence, the equations for all the velocity components
look all the same, have the same system matrix, and can be solved in %parallel. Obviously, this approach
has also its disadvantages. For instance, we need to keep several <code>DoFHandler</code>s and iterators
synchronized when assembling matrices and right hand sides; obtaining quantities that are inherent to
vector-valued functions (e.g. divergences) becomes a little awkward, and others.

<a name ="testcase"></a>
<h3> The Testcase </h3>

The testcase that we use for this program consists of the flow around a square obstacle. The geometry is
as follows:

@image html step-35.geometry.png

with $H=4.1$, making the geometry slightly non-symmetric.

We impose no-slip boundary conditions on both the top and bottom walls and the obstacle. On the left side we
have the inflow boundary condition
@f[
  u =
  \left( \begin{array}{c} 4 U_m y (H-y)/H^2 \\ 0 \end{array} \right),
@f]
with $U_m = 1.5$, i.e. the inflow boundary conditions correspond to Poiseuille flow for this configuration.
Finally, on the right vertical wall we impose the condition that the vertical component of the velocity
and the pressure should both be zero.
The final time $T=10$.


